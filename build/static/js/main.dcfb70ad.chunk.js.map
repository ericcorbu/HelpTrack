{"version":3,"sources":["components/HelpForm/HelpForm.js","components/HelpList/HelpList.js","App.js","serviceWorker.js","index.js"],"names":["HelpForm","props","handleSubmit","bind","name","React","createRef","grading","question","description","event","questionType","preventDefault","this","current","checked","formData","value","type","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","Form","id","onSubmit","Group","controlId","Label","Control","ref","Check","label","as","rows","Text","className","Button","Component","HelpList","state","data","fetch","then","response","json","setState","studentList","map","student","ListGroup","Item","Badge","variant","Card","App","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mTA2DeA,E,kDAvDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,KAAOC,IAAMC,YAClB,EAAKC,QAAUF,IAAMC,YACrB,EAAKE,SAAWH,IAAMC,YACtB,EAAKG,YAAcJ,IAAMC,YANV,E,yDAUNI,GAET,IAAIC,EADJD,EAAME,iBAGFD,EADAE,KAAKN,QAAQO,QAAQC,QACN,UAGA,WAEnB,IAAIC,EAAW,CACXZ,KAAMS,KAAKT,KAAKU,QAAQG,MACxBC,KAAMP,EACNF,YAAaI,KAAKJ,YAAYK,QAAQG,OAItCE,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,iBACjBF,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAII,KAAKC,KAAKC,UAAUT,M,+BAKxB,OACI,kBAACU,EAAA,EAAD,CAAMC,GAAG,WAAWC,SAAUf,KAAKX,cAC/B,kBAACwB,EAAA,EAAKG,MAAN,CAAYC,UAAU,YAClB,kBAACJ,EAAA,EAAKK,MAAN,kBACA,kBAACL,EAAA,EAAKM,QAAN,CAAcd,KAAK,OAAOe,IAAKpB,KAAKT,QAExC,kBAACsB,EAAA,EAAKG,MAAN,CAAYC,UAAU,YAClB,kBAACJ,EAAA,EAAKK,MAAN,qBACA,kBAACL,EAAA,EAAKQ,MAAN,CAAYhB,KAAK,QAAQd,KAAK,WAAWa,MAAM,UAAUgB,IAAKpB,KAAKN,QAAS4B,MAAM,YAClF,kBAACT,EAAA,EAAKQ,MAAN,CAAYhB,KAAK,QAAQd,KAAK,WAAWa,MAAM,WAAWgB,IAAKpB,KAAKL,SAAU2B,MAAM,cAExF,kBAACT,EAAA,EAAKG,MAAN,CAAYC,UAAU,eAClB,kBAACJ,EAAA,EAAKK,MAAN,mCACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,WAAWC,KAAK,MACjC,kBAACX,EAAA,EAAKY,KAAN,CAAWC,UAAU,aAAaN,IAAKpB,KAAKJ,aAA5C,2DAEJ,kBAAC+B,EAAA,EAAD,CAAQtB,KAAK,UAAb,qB,GAnDOb,IAAMoC,W,uBCsCdC,E,kDApCX,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IACD0C,MAAQ,CACTC,KAAM,IAHK,E,gEAOE,IAAD,OAChBC,MAAM,iBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAF,GAAI,OAAI,EAAKK,SAAS,CAACL,c,+BAIjC,IAAMM,EAAcrC,KAAK8B,MAAMC,KAAKO,KAAI,SAACC,GAAD,OACpC,kBAACC,EAAA,EAAUC,KAAX,KACKF,EAAQhD,KACT,kBAACmD,EAAA,EAAD,CAAOC,QAAQ,aAAaJ,EAAQlC,UAG5C,OACI,kBAACuC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAD,CAAWG,QAAQ,SACdN,Q,GAxBE7C,IAAMoC,WCuBdiB,MApBf,WACE,OACE,yBAAKnB,UAAU,OACb,6BACA,yCAGA,6BACA,kBAACkB,EAAA,EAAD,KAEE,kBAACA,EAAA,EAAKE,KAAN,KACE,kBAAC,EAAD,QAGJ,6BACA,kBAAC,EAAD,QCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dcfb70ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nclass HelpForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.name = React.createRef();\r\n        this.grading = React.createRef();\r\n        this.question = React.createRef();\r\n        this.description = React.createRef();\r\n\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        var questionType;\r\n        if (this.grading.current.checked) {\r\n            questionType = \"Grading\";\r\n        }\r\n        else {\r\n            questionType = \"Question\"\r\n        }\r\n        var formData = {\r\n            name: this.name.current.value,\r\n            type: questionType,\r\n            description: this.description.current.value\r\n\r\n        }\r\n        \r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('POST', '/api/requests');\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n        xhr.send(JSON.stringify(formData));\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form id=\"helpForm\" onSubmit={this.handleSubmit}>\r\n                <Form.Group controlId=\"zoomName\">\r\n                    <Form.Label>Zoom Name</Form.Label>\r\n                    <Form.Control type=\"text\" ref={this.name} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"helpType\">\r\n                    <Form.Label>Type of Help</Form.Label>\r\n                    <Form.Check type=\"radio\" name=\"helpType\" value=\"Grading\" ref={this.grading} label=\"Grading\"/>\r\n                    <Form.Check type=\"radio\" name=\"helpType\" value=\"Question\" ref={this.question} label=\"Question\"/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Brief Question Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"2\"/>\r\n                    <Form.Text className=\"text-muted\" ref={this.description}>You can leave this blank if you don't have a question.</Form.Text>\r\n                </Form.Group>\r\n                <Button type=\"submit\">Ask For Help</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\nexport default HelpForm;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nclass HelpList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        };\n    }\n\n    componentDidMount() {\n        fetch('/api/requests')\n            .then(response => response.json())\n            .then(data => this.setState({data}));\n    }\n\n    render() {\n        const studentList = this.state.data.map((student) =>\n            <ListGroup.Item>\n                {student.name}\n                <Badge variant=\"secondary\">{student.type}</Badge>\n            </ListGroup.Item>\n        );\n        return (\n            <Card>\n                <ListGroup variant=\"flush\">\n                    {studentList}\n                </ListGroup>\n            </Card>\n            \n\n        )\n            \n\n        \n\n    }\n    \n}\nexport default HelpList;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HelpForm from './components/HelpForm/HelpForm';\nimport HelpList from './components/HelpList/HelpList';\nimport Card from 'react-bootstrap/Card';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br/>\n      <h1>\n        HelpTrack\n      </h1>\n      <br/>\n      <Card>\n        \n        <Card.Body>\n          <HelpForm/>\n        </Card.Body>\n      </Card>\n      <br/>\n      <HelpList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}